version: "3.9"

services:
  clean-mongo:
    build:
      context: ./backend/config
    container_name: clean-mongo
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network

  front-end:
    build:
      context: ./day-trading-app
    container_name: front-end
    ports:
      - "3000:3000"
    networks:
      - backend-network
  
  auth-service:
    build:
      context: ./backend/auth
    container_name: auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service:
      build:
          context: ./backend/transaction
      container_name: transaction-service
      volumes:
        - ./backend/middleware:/backend/middleware
      ports:
        - "3004:3004"
      environment:
        - NODE_ENV=development
        - MONGO_URI=${MONGO_URI}
        - JWT_SECRET=${JWT_SECRET}
      networks:
        - backend-network
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
        interval: 10s
        timeout: 5s
        retries: 5

  order-service:
    build:
      context: ./backend/order
    container_name: order-service
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  usermanagement-service:
    build:
      context: ./backend/userManagement
    container_name: usermanagement-service
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network

  api-gateway:
    image: nginx:latest
    container_name: api-gateway
    ports:
      - "8080:8080"  # API Gateway is exposed on port 8080
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      order-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      transaction-service:
        condition: service_healthy
    networks:
      - backend-network

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI
    networks:
      - backend-network
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 5
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend-network
  matching-engine:
    ports:
      - "3006:3006"
    build:
      context: ./backend/matchingEngine
    container_name: matching-engine
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq
      - REDIS_URL=redis://redis:6379
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge