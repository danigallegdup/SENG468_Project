name: Backend CI

on:
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create .env file
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

    - name: Run docker compose
      run: docker-compose -f docker-compose.yml up --build -d
    
    - name: Check running containers
      run: docker ps -a
    
    - name: Check API Gateway logs
      run: docker logs api-gateway
    
    - name: Docker network ls
      run: docker network ls

    - name: Connect api-gateway
      run: docker network connect bridge api-gateway

    - name: check bridge
      run: docker network inspect bridge

    - name: Run JMeter Tests
      uses: QAInsights/PerfAction@v3.1
      with:
        test-plan-path: Sample_test_script2.jmx
        args: "-JBASE_URL=host.docker.internal"

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: jmeter-results
        path: result.jtl

    - name: Analyze Results with Latency Lingo
      id: latency-lingo
      uses: latency-lingo/github-action@v0.0.2
      with:
        api-key: ${{ secrets.LATENCY_LINGO_API_KEY }}
        file: result.jtl
        label: Checkout Flow Automated Test Plan
        format: jmeter
      continue-on-error: true

    - name: Capture Latency Lingo Report URL
      id: capture-url
      run: |
        REPORT_URL=$(grep 'Report can be found at' output.log | awk '{print $8}')
        echo "REPORT_URL=$REPORT_URL" >> $GITHUB_ENV
        echo "::set-output name=report_url::$REPORT_URL"

    - name: Check PR Changes
      id: pr-changes
      run: echo "::set-output name=changes::${{ toJson(github.event.pull_request.changed_files) }}"

    - name: Create Comment
      if: steps.pr-changes.outputs.changes != '[]'
      run: |
        # Use GitHub API to create a comment on the PR
        PR_NUMBER=${{ github.event.pull_request.number }}
        REPORT_URL=${{ steps.capture-url.outputs.report_url }}
        COMMENT="Check the test report at $REPORT_URL;"
        GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
        COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"

        curl -s -H "Authorization: token ${GITHUB_TOKEN}" -X POST $COMMENT_URL -d "{\"body\":\"$COMMENT\"}"

    - name: Stop docker compose
      run: docker-compose -f docker-compose.yml down
    
    - name: Fail pipeline if there are any tests Fail
      run: |
        if [ -f "result.jtl" ]; then
          if grep -q "false" result.jtl; then
            echo "Tests failed"
            exit 1
          else
            echo "Tests passed"
          fi
        else
          echo "No test results found"
          exit 1
        fi